{"version":3,"sources":["store/reducers/room.reducer.js","store/actionTypes.js","store/reducers/peers.reducer.js","store/reducers/connections.reducer.js","store/reducers/calls.reducer.js","store/reducers/index.js","store/index.js","components/RoomLobby/RoomLobby.jsx","components/Room/Room.jsx","components/Home/Home.jsx","components/RoomCreateForm/RoomCreateForm.jsx","components/TestRoom/TestStreamManager/TestStreamManager.jsx","components/TestRoom/TestRoom.jsx","store/actions/connections.actions.js","utils.js","constants.js","components/App/App.jsx","index.jsx","../node_modules/peerjs/dist sync"],"names":["initialState","data","id","name","peers","connections","calls","error","roomReducer","room","action","type","payload","Object","keys","nickname","peerId","connection","call","peersReducer","connectionsReducer","connectionId","newData","entries","filter","conn","callsReducer","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","RoomLobby","Room","Home","to","RoomCreateForm","streamsTest","connect","state","values","localPeer","useState","streams","setStreams","videoRef1","useRef","videoRef2","videoRef3","videoRef4","startLocalStream","a","navigator","mediaDevices","getUserMedia","video","audio","mediaStream","concat","push","console","useEffect","on","remoteCall","log","answer","remoteMediaStream","newStreams","refs","forEach","stream","i","current","srcObject","oncanplay","play","muted","onClick","e","peer","ref","addConnection","dispatch","getState","addConnectionAction","socket","setSocket","setLocalPeer","message","roomId","password","inputState","setInputState","initConnectionListeners","parsedData","JSON","parse","textMessage","author","text","object","io","secure","query","map","key","value","join","socketId","connectionWithLeavingUser","close","initSocket","customPeerId","Peer","host","port","path","debug","config","iceServers","url","initPeer","emit","connectWithPeer","remotePeerId","maxConnections","joinedUsers","listAllPeers","onSubmit","preventDefault","send","stringify","sendMessage","aria-label","onChange","target","placeholder","App","CssBaseline","exact","component","TestRoom","ReactDOM","render","document","getElementById","webpackEmptyContext","req","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.6cd98a72.chunk.js","sourcesContent":["import {SET_CALLS, ADD_CONNECTION, SET_CURRENT_ROOM, SET_CURRENT_ROOM_ERROR, SET_PEERS} from '../actionTypes';\r\n\r\nconst initialState = {\r\n    data: {\r\n        id: 'dummy-room-id',\r\n        name: 'Dummy Room',\r\n        peers: [\r\n            'd7f7saim3',\r\n            '32mfdnmio',\r\n        ],\r\n        connections: [\r\n            'd7f7saim3',\r\n            '32mfdnmio',\r\n        ],\r\n        calls: [\r\n            'd7f7saim3',\r\n            '32mfdnmio',\r\n        ]\r\n    },\r\n    error: null\r\n};\r\n\r\nconst roomReducer = (room = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ROOM: {\r\n            return {data: action.payload.room, error: null};\r\n        }\r\n        case SET_CURRENT_ROOM_ERROR: {\r\n            return {data: room.data, error: action.payload.error};\r\n        }\r\n        case SET_PEERS: {\r\n            const peers = Object.keys(action.payload.peers);\r\n            return {data: room.data, peers, error: null};\r\n        }\r\n        case ADD_CONNECTION: {\r\n            // const connections = Object.keys(action.payload.connections);\r\n            // return {data: room.data, connections, error: null};\r\n            return room;\r\n        }\r\n        case SET_CALLS: {\r\n            const calls = Object.keys(action.payload.calls);\r\n            return {data: room.data, calls, error: null};\r\n        }\r\n        default: {\r\n            return room;\r\n        }\r\n    }\r\n};\r\n\r\nexport default roomReducer;\r\n","export const SET_CURRENT_ROOM = 'SET_CURRENT_ROOM';\r\nexport const SET_CURRENT_ROOM_ERROR = 'SET_CURRENT_ROOM_ERROR';\r\n\r\nexport const SET_PEERS = 'SET_PEERS';\r\nexport const SET_PEERS_ERROR = 'SET_PEERS_ERROR';\r\n\r\nexport const ADD_CONNECTION = 'ADD_CONNECTION';\r\nexport const REMOVE_CONNECTION = 'REMOVE_CONNECTION';\r\nexport const SET_CONNECTIONS_ERROR = 'SET_CONNECTIONS_ERROR';\r\n\r\nexport const SET_CALLS = 'SET_CALLS';\r\nexport const SET_CALLS_ERROR = 'SET_CALLS_ERROR';\r\n","import {ADD_CONNECTION, SET_CALLS, SET_PEERS, SET_PEERS_ERROR} from '../actionTypes';\r\n\r\nconst initialState = {\r\n    data: {\r\n        'd7f7saim3': {nickname: 'Andi', peerId: 'dscdsv-csdvsdv-dvewvew-btrbrb3', connection: 'efewfgrger', call: 'fewfewfwef'},\r\n        '32mfdnmio': {nickname: 'Jimmy', peerId: 'ztjzt-ckhjgvv-dvewvew-b3cddrv', connection: 'vverberberb', call: 'vewrverbe'}\r\n    },\r\n    error: null\r\n};\r\n\r\nconst peersReducer = (peers = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_PEERS: {\r\n            return {peers: action.payload.peers, error: null};\r\n        }\r\n        case SET_PEERS_ERROR: {\r\n            return {data: peers.data, error: action.payload.error};\r\n        }\r\n        case ADD_CONNECTION: {\r\n            // TODO iterate through peers and reference their connection id\r\n            return peers;\r\n        }\r\n        case SET_CALLS: {\r\n            // TODO iterate through peers and reference their call id\r\n            return peers;\r\n        }\r\n        default: {\r\n            return peers;\r\n        }\r\n    }\r\n};\r\n\r\nexport default peersReducer;\r\n\r\n","import {ADD_CONNECTION, REMOVE_CONNECTION, SET_CONNECTIONS_ERROR} from '../actionTypes';\r\n\r\nconst initialState = {\r\n    data: {},\r\n    error: null\r\n};\r\n\r\nconst connectionsReducer = (connections = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CONNECTION: {\r\n            const connection = action.payload.connection;\r\n            return {data: {...connections.data, [connection.connectionId]: connection}, error: null};\r\n        }\r\n        case REMOVE_CONNECTION: {\r\n            const newData = Object.entries(connections.data).filter(conn => conn.connectionId !== action.payload.connectionId);\r\n            return {data: newData, error: null};\r\n        }\r\n        case SET_CONNECTIONS_ERROR: {\r\n            return {...connections, error: action.payload.error};\r\n        }\r\n        default: {\r\n            return connections;\r\n        }\r\n    }\r\n};\r\n\r\nexport default connectionsReducer;\r\n\r\n","import {SET_CALLS, SET_CALLS_ERROR} from '../actionTypes';\r\n\r\nconst initialState = {\r\n    data: {},\r\n    error: null\r\n};\r\n\r\nconst callsReducer = (calls = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CALLS: {\r\n            return {calls: action.payload.calls, error: null};\r\n        }\r\n        case SET_CALLS_ERROR: {\r\n            return {data: calls.data, error: action.payload.error};\r\n        }\r\n        default: {\r\n            return calls;\r\n        }\r\n    }\r\n};\r\n\r\nexport default callsReducer;\r\n\r\n","import { combineReducers } from 'redux';\r\nimport roomReducer from './room.reducer';\r\nimport peersReducer from './peers.reducer';\r\nimport connectionsReducer from './connections.reducer';\r\nimport callsReducer from './calls.reducer';\r\n\r\nconst reducer = combineReducers({\r\n    room: roomReducer,\r\n    peers: peersReducer,\r\n    calls: callsReducer,\r\n    connections: connectionsReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\n\r\nconst RoomLobby = () => {\r\n    return <div>RoomLobby</div>;\r\n};\r\n\r\nexport default RoomLobby;\r\n","import React from 'react';\r\n\r\nconst Room = () => {\r\n    return <div>Room</div>;\r\n};\r\n\r\nexport default Room;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n    return <div>Home\r\n        <Link to={'test-room'} >TestRoom</Link>\r\n    </div>;\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst RoomCreateForm = () => {\r\n    return <div>RoomCreateForm</div>;\r\n};\r\n\r\nexport default RoomCreateForm;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst streamsTest = [];\r\nconst TestStreamManager = ({localPeer, connections}) => {\r\n    const [streams, setStreams] = useState([]);\r\n\r\n    // TODO replace individual refs with method in link:  https://stackoverflow.com/questions/54940399/how-target-dom-with-react-useref-in-map\r\n    //  This is stupid but react makes it kinda hard to use refs dynamically, so this has to do for now... (╯°□°)╯︵ ┻━┻\r\n    let videoRef1 = useRef(null);\r\n    let videoRef2 = useRef(null);\r\n    let videoRef3 = useRef(null);\r\n    let videoRef4 = useRef(null);\r\n\r\n    const startLocalStream = async () => {\r\n        try {\r\n            let mediaStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true});\r\n            setStreams(streams.concat(mediaStream));\r\n            streamsTest.push(mediaStream);\r\n        } catch (error) {\r\n            console.error('local stream couldnt be started via \"startStream()\"', error);\r\n        }\r\n    };\r\n\r\n    const initCallListeners = () => {\r\n        if (localPeer) {\r\n            localPeer.on('call', remoteCall => {\r\n                console.log('incoming call. Answering automatically, remoteCall', remoteCall);\r\n                remoteCall.answer(streams[0]);\r\n\r\n                remoteCall.on('remote-----------------------------stream', remoteMediaStream => {\r\n                    const newStreams = [...streams, remoteMediaStream];\r\n                    console.log('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<', remoteMediaStream, newStreams);\r\n                    setStreams(newStreams);\r\n                    streamsTest.push(remoteMediaStream);\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (localPeer && localPeer.id) {\r\n            initCallListeners();\r\n            startLocalStream();\r\n        }\r\n    }, [localPeer]);\r\n\r\n    // set src of <video> to remote stream when available\r\n    useEffect(() => {\r\n        console.log('----------------------------------------------useEffect STREAMS', streams, videoRef1, videoRef2);\r\n        const refs = [videoRef1, videoRef2, videoRef3, videoRef4];\r\n\r\n        streamsTest.forEach((stream, i) => {\r\n            console.log('---stream NR', i, stream);\r\n            const video = refs[i];\r\n            if (video.current && stream) {\r\n                video.current.srcObject = stream;\r\n                video.current.oncanplay = () => {\r\n                    video.current.play();\r\n                    video.current.muted = false; // set to false to hear/test your own audio\r\n                };\r\n            }\r\n        });\r\n    }, [streams]);\r\n\r\n    const startCall = () => {\r\n        if (localPeer && streams[0]) {\r\n            connections.forEach(connection => {\r\n                console.log('calling', connection.peer, 'stream', streams[0]);\r\n                const call = localPeer.call(connection.peer, streams[0]);\r\n                call.on('stream', remoteMediaStream => {\r\n                    const newStreams = [...streams, remoteMediaStream];\r\n                    console.log('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<', remoteMediaStream, newStreams);\r\n                    setStreams(newStreams);\r\n                    streamsTest.push(remoteMediaStream);\r\n                });\r\n            })\r\n        }\r\n    };\r\n\r\n    const handleStartCall = e => {\r\n        startCall();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={handleStartCall}>CALL all connections</button>\r\n            <video ref={videoRef1} />\r\n            <video ref={videoRef2} />\r\n            <video ref={videoRef3} />\r\n            <video ref={videoRef4} />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    connections: Object.values(state.connections.data)\r\n});\r\n\r\nexport default  connect(mapStateToProps)(TestStreamManager);\r\n","import React, {useState, useEffect} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Peer from \"peerjs\";\r\nimport io from 'socket.io-client';\r\nimport {serializeQueryString} from \"../../utils\";\r\nimport {API_BASE_URL, PORT_SIGNALING, PORT_SOCKET} from \"../../constants\";\r\nimport {addConnection} from \"../../store/actions/connections.actions\";\r\nimport {Link} from \"react-router-dom\";\r\nimport TestStreamManager from \"./TestStreamManager/TestStreamManager\";\r\n\r\n\r\n// const calls = [];\r\nconst TestRoom = ({connections, addConnection}) => {\r\n    const [socket, setSocket] = useState(null);\r\n    const [localPeer, setLocalPeer] = useState(null);\r\n    const [remoteStreams, setRemoteStreams] = useState([]);\r\n\r\n    const [inputState, setInputState] = useState({\r\n        message: '',\r\n        roomId: 'dummy-room-id',\r\n        password: 'dummy123'\r\n    });\r\n\r\n    const initPeer = () => {\r\n        if (socket) {\r\n            const customPeerId = socket.id;\r\n            console.log('init peer. peerId:', customPeerId);\r\n            const peer = new Peer(customPeerId, {\r\n                host: API_BASE_URL,\r\n                port: PORT_SIGNALING,\r\n                path: '/peer/signal',\r\n                debug: 3,\r\n                config: {iceServers: [{url: 'stun:stun.l.google.com:19302'}]}\r\n            });\r\n\r\n            console.log('peer', peer);\r\n            setLocalPeer(peer);\r\n        } else {\r\n            console.log('could not create new Peer because the socket.io connection is not established yet');\r\n        }\r\n    };\r\n\r\n    const initSocket = () => {\r\n        const socket = io(`https://${API_BASE_URL}:${PORT_SOCKET}`, {\r\n            // transports: ['websocket'],\r\n            secure: true,\r\n            query: serializeQueryString({\r\n                nickname: 'andi'\r\n            })\r\n        });\r\n\r\n        console.log('socket--------------', socket);\r\n        socket.on('ready', (socketId) => {\r\n            console.log('socket is ready-------------------------------------', socketId);\r\n            setSocket(socket);\r\n\r\n            // initPeer();\r\n        });\r\n\r\n        // setSocket(socket);\r\n\r\n\r\n\r\n        // Init Listeners\r\n        socket.on('user-join', (room) => {\r\n            console.log('new user joined room, he will connect to you shortly');\r\n        });\r\n\r\n        socket.on('user-leave', (data) => {\r\n            const connectionWithLeavingUser = connections[data.peerId];\r\n            console.log('user left room', data.peerId, connectionWithLeavingUser);\r\n\r\n            if (connectionWithLeavingUser) {\r\n                connectionWithLeavingUser.close();\r\n            }\r\n        });\r\n    };\r\n\r\n    const initConnectionListeners = (connection) => {\r\n        console.log('connection listeners', connection);\r\n        connection.on('data', data => {\r\n            const parsedData = JSON.parse(data);\r\n            console.log('parsed', parsedData);\r\n\r\n            if (parsedData.textMessage) {\r\n                console.log(\r\n                    `%c MESSAGE - ${parsedData.textMessage.author}: \"${parsedData.textMessage.text}\"`,\r\n                    'background: black; color: white; padding: 1rem'\r\n                );\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        initSocket();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (localPeer) {\r\n            console.log('peer initialized: ', localPeer);\r\n\r\n            localPeer.on('open', id => {\r\n                console.log('My peer ID is: ' + localPeer.id, localPeer);\r\n                // initSocket();\r\n            });\r\n\r\n            localPeer.on('connection', connection => {\r\n                console.log('on connection with', connection);\r\n                addConnection(connection);\r\n                initConnectionListeners(connection);\r\n            });\r\n\r\n            // localPeer.on('call', remoteCall => {\r\n            //     console.log('incoming call. Answering automatically');\r\n            //     remoteCall.on('stream', remoteMediaStream => {\r\n            //         setRemoteStreams(remoteMediaStream);\r\n            //     });\r\n            // });\r\n        }\r\n    }, [localPeer]);\r\n\r\n    useEffect(() => {\r\n        if (socket && socket.id) {\r\n            initPeer();\r\n        }\r\n\r\n        // On unmount: notify other people that you left before actually disconnecting\r\n        return () => {\r\n            console.log('unmount', socket);\r\n            if (socket) {\r\n                socket.emit('leave', inputState.roomId); // TODO change id for real rooms.\r\n            }\r\n        }\r\n    }, [socket]);\r\n\r\n\r\n    const handleCreateRoom = (e) => {\r\n        socket.emit('create', {\r\n            // id: 'test-room-id',\r\n            name: 'test room name',\r\n            password: inputState.password,\r\n            maxConnections: 4\r\n        }, (data) => {\r\n            if (data) {\r\n                console.log('room created', data);\r\n                setInputState({...inputState, roomId: 'dummy-room-id'});\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleJoinRoom = (e) => {\r\n        console.log('join room handler');\r\n        const {roomId, password } = inputState;\r\n        socket.emit('join', { roomId, password, peerId: localPeer.id },\r\n            // callback: the joining user himself is responsible to establish connections with other users\r\n            (data) => {\r\n            if (data) {\r\n                console.log('roomRef CB', data);\r\n                data.room.joinedUsers.forEach((peerId) => {\r\n                    if (peerId !== localPeer.id) {\r\n                        connectWithPeer(peerId);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleListAllPeers = (e) => {\r\n        localPeer.listAllPeers((peers) => {\r\n            console.log('peers', peers);\r\n        });\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (localPeer) {\r\n            console.log('send message try');\r\n            const message = {textMessage: {author: 'derp', text: inputState.message} };\r\n            Object.values(connections).forEach(connection => {\r\n                console.log('connection');\r\n                connection.send(JSON.stringify(message));\r\n            });\r\n        }\r\n    };\r\n\r\n    const connectWithPeer = async (remotePeerId) => {\r\n        console.log('connect with peer called', remotePeerId);\r\n        const connection = await localPeer.connect(remotePeerId);\r\n        addConnection(connection);\r\n        initConnectionListeners(connection);\r\n    };\r\n\r\n    const startCallWithPeer = (remotePeerId, localStream) => {\r\n        localPeer.call(remotePeerId, localStream);\r\n    };\r\n\r\n    // const startCall = destinationPeerId => {\r\n    //     if (peer && connection && stream) {\r\n    //         setCall(peer.call(destinationPeerId, stream));\r\n    //     }\r\n    // };\r\n\r\n    //////////////////\r\n    //// HANDLERS ////\r\n    //////////////////\r\n    const handleChange = e => setInputState({...inputState, [e.target.name]: e.target.value});\r\n\r\n    const handleSendMessage = e => {\r\n        e.preventDefault();\r\n        sendMessage();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                Hello world\r\n                <button onClick={handleCreateRoom}>create room</button>\r\n                <button onClick={handleJoinRoom}>join room</button>\r\n                <button onClick={handleListAllPeers}>listAllPeers room</button>\r\n                <Link to={'/'}>HOME</Link>\r\n            </div>\r\n            <div>\r\n                <form onSubmit={handleSendMessage}>\r\n                    <fieldset>\r\n                        <legend>Send Message to Peers</legend>\r\n                        <input\r\n                            type='text'\r\n                            aria-label='chat input'\r\n                            name='message'\r\n                            value={inputState.message}\r\n                            onChange={handleChange}\r\n                            placeholder='Hello Peer...'\r\n                        />\r\n                        <button type='submit'>send</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n            <TestStreamManager localPeer={localPeer} />\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    connections: state.connections.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {addConnection})(TestRoom);\r\n\r\n","import {ADD_CONNECTION} from \"../actionTypes\";\r\n\r\nconst addConnectionAction = connection => ({\r\n    type: ADD_CONNECTION,\r\n    payload: {connection}\r\n});\r\n\r\nexport const addConnection = connection => (dispatch, getState) => {\r\n    if (connection.peer && connection.connectionId) {\r\n        dispatch(addConnectionAction(connection));\r\n    }\r\n};\r\n","// The place to put all helper methods that do not necessarily belong to a specific component\r\n// Once this file gets too crowded, create an utils folder and start seperating the exported helper methods\r\n\r\n/**\r\n * Transforms a javascript object into a query string.\r\n * @param object The source object. Example: {a: 5, b: 10}\r\n * @returns {string} The resulting query string. Example 'a=5&b=10'\r\n */\r\nexport const serializeQueryString = object => {\r\n    return Object.entries(object).map(([key, value]) => `${key}=${value}`).join('&');\r\n};\r\n","export const API_BASE_URL = 'derpmasters.online'; // will use a environment variable later on\r\n// export const API_BASE_URL = 'localhost'; // uncomment for local development\r\n\r\nexport const PORT_SIGNALING = '5001';\r\nexport const PORT_SOCKET = '5002';\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport RoomLobby from \"../RoomLobby/RoomLobby\";\r\nimport Room from \"../Room/Room\";\r\nimport Home from \"../Home/Home\";\r\nimport RoomCreateForm from \"../RoomCreateForm/RoomCreateForm\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TestRoom from \"../TestRoom/TestRoom\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <CssBaseline>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path='/' component={Home} />\r\n                    <Route exact path='/create-room' component={RoomCreateForm} />\r\n                    <Route exact path='/room-lobby/:roomId' component={RoomLobby} />\r\n                    <Route path='/rooms/:roomId' component={Room} />\r\n                    <Route path='/test-room' component={TestRoom} />\r\n                </Switch>\r\n            </Router>\r\n        </CssBaseline>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React, {StrictMode} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 72;"],"sourceRoot":""}